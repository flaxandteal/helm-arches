# This is based on the AGPL licensed docker-compose.yaml
# file from archesproject/arches
version: '2'
services:

    arches:
      container_name: arches
      image: arches_${ARCHES_PROJECT}:latest
      restart: unless-stopped
      entrypoint: ["../../entrypoint.sh"]
      build:
        context: .
        dockerfile: ./Dockerfile
        args:
          - ARCHES_PROJECT=$ARCHES_PROJECT
      command: run_arches
      volumes:
        - arches-log:/arches/arches/logs
        - arches-static:/static_root
        - ./$ARCHES_PROJECT:/web_root/$ARCHES_PROJECT
        - ./entrypoint.sh:/web_root/entrypoint.sh
        - ./settings_docker.py:/web_root/arches/arches/settings_docker.py
      environment:
        - ARCHES_PROJECT=$ARCHES_PROJECT
        - INSTALL_DEFAULT_GRAPHS=False
        - INSTALL_DEFAULT_CONCEPTS=False
        - PGUSERNAME=postgres
        - PGPASSWORD=postgres
        - PGDBNAME=arches
        - PGHOST=db
        - PGPORT=5432
        - COUCHDB_HOST=couchdb
        - COUCHDB_PORT=5984
        - COUCHDB_USER=admin
        - COUCHDB_PASS=password
        - ESHOST=elasticsearch
        - ESPORT=9200
        - CELERY_BROKER_URL=amqp://rabbitmq
        - DJANGO_MODE=DEV
        - DJANGO_DEBUG=True
        # - DJANGO_REMOTE_DEBUG=False
        - DOMAIN_NAMES=localhost
        - PYTHONUNBUFFERED=0
        - TZ=PST
      ports:
        - '8000:8000'
      depends_on:
        - db
        - elasticsearch
        - couchdb

    arches_worker:
      container_name: arches_worker
      image: arches_${ARCHES_PROJECT}:latest
      restart: unless-stopped
      entrypoint: ["../../entrypoint.sh"]
      build:
        context: .
        dockerfile: ./Dockerfile
        args:
          - ARCHES_PROJECT=$ARCHES_PROJECT
      command: run_celery
      volumes:
        - arches-log:/arches/arches/logs
        - arches-static:/static_root
        - ./$ARCHES_PROJECT:/web_root/$ARCHES_PROJECT
        - ./entrypoint.sh:/web_root/entrypoint.sh
        - ./settings_docker.py:/web_root/arches/arches/settings_docker.py
      environment:
        - ARCHES_PROJECT=$ARCHES_PROJECT
        - INSTALL_DEFAULT_GRAPHS=False
        - INSTALL_DEFAULT_CONCEPTS=False
        - PGUSERNAME=postgres
        - PGPASSWORD=postgres
        - PGDBNAME=arches
        - PGHOST=db
        - PGPORT=5432
        - COUCHDB_HOST=couchdb
        - COUCHDB_PORT=5984
        - COUCHDB_USER=admin
        - COUCHDB_PASS=password
        - ESHOST=elasticsearch
        - ESPORT=9200
        - DJANGO_MODE=DEV
        - DJANGO_DEBUG=True
        # - DJANGO_REMOTE_DEBUG=False
        - DOMAIN_NAMES=localhost
        - PYTHONUNBUFFERED=0
        - CELERY_BROKER_URL=amqp://rabbitmq
        - TZ=PST
      depends_on:
        - db
        - elasticsearch
        - couchdb
        - rabbitmq

    nginx:
      container_name: nginx
      image: cvast/cvast-nginx:1.2.0
      restart: unless-stopped
      ports:
        - '8080:80'
        - '4430:443'
      volumes:
        - arches-static:/www/static
        - letsencrypt-acme-challenge:/var/www
        - letsencrypt:/etc/letsencrypt
      environment:
        - NGINX_PROXY_MODE=local
        - NGINX_PROTOCOL=http
        - LOCAL_PROXY_HOST=arches
        - LOCAL_PROXY_PORT=8000
        - DOMAIN_NAMES=localhost
        - PUBLIC_MODE=False
        - TZ=PST
      depends_on:
        - arches

    db:
      container_name: db
      image: kartoza/postgis:12.0
      volumes:
          - postgres-data:/var/lib/postgresql/data
          - postgres-log:/var/log/postgresql
          - $ARCHES_ROOT/arches/install/init-unix.sql:/docker-entrypoint-initdb.d/init.sql # to set up the DB template
      ports:
        - '5432:5432'
      environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASS=postgres
        - POSTGRES_DB=postgres
        - POSTGRES_MULTIPLE_EXTENSIONS=postgis,postgis_topology
        - TZ=PST

    couchdb:
      container_name: couchdb
      image: couchdb:2.1.1
      ports:
        - "5984:5984"
      environment:
        COUCHDB_USER: admin
        COUCHDB_PASSWORD: password
      volumes:
        - couchdb-data:/usr/local/var/lib/couchdb
        - couchdb-log:/usr/local/var/log/couchdb

    elasticsearch:
      container_name: elasticsearch
      image: elasticsearch:7.5.1
      volumes:
        - elasticsearch-data:/usr/share/elasticsearch/data
      ports:
        - "9200:9200"
        - "9300:9300"
      environment:
        - TZ=PST
        - discovery.type=single-node
        - discovery.seed_hosts=
        - "ES_JAVA_OPTS=-Xms400m -Xmx400m"

    letsencrypt:
      container_name: letsencrypt
      image: cvast/cvast-letsencrypt:1.1
      volumes:
        - letsencrypt-acme-challenge:/var/www
        - letsencrypt:/etc/letsencrypt
        - letsencrypt-log:/var/log/letsencrypt
      command: get_certificate
      environment:
        - MODE=regular
        - LETSENCRYPT_EMAIL=info@example.com
        - DOMAIN_NAMES=localhost
        - PRODUCTION_MODE=False
        - PERSISTENT_MODE=True
        - TZ=PST

    rabbitmq:
      container_name: rabbitmq
      image: rabbitmq

volumes:
    arches-log:
    arches-static:
    couchdb-data:
    couchdb-log:
    postgres-data:
    postgres-log:
    elasticsearch-data:
    letsencrypt:
    letsencrypt-log:
    letsencrypt-acme-challenge:
